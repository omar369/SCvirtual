{"version":3,"sources":["components/Scene/Scene.elements.js","components/Scene/Script.js","components/Scene/Scene.js","App.js","index.js"],"names":["ContainerScene","styled","div","currentRef","scene","gsap","timeline","defaults","duration","THREE","camera","add","position","set","lookAt","background","fog","renderer","antialias","setSize","orbitControls","OrbitControls","domElement","enableDamping","target","y","resize","clientWidth","clientHeight","aspect","updateProjectionMatrix","window","addEventListener","ambLight","pointLight","x","pointLight2","eMap","load","environment","dracoLoader","DRACOLoader","setDecoderPath","gltfLoader","GLTFLoader","setDRACOLoader","gltf","console","log","animate","update","render","requestAnimationFrame","Scene","mountRef","useRef","useEffect","current","appendChild","initScene","dispose","removeChild","className","ref","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"kMAEaA,E,MAAiBC,EAAOC,IAAV,8D,uCCKvBC,EAAa,KASXC,GAPW,IAAIC,IAAKC,SAAS,CACjCC,SAAS,CACPC,SAAU,MAKA,IAAIC,MACZC,EAAS,IAAID,IAAwB,GAAI,EAAW,GAAK,KAC/DL,EAAMO,IAAID,GACVA,EAAOE,SAASC,IAAI,EAAG,EAAG,GAC1BH,EAAOI,OAAO,IAAIL,MAGlBL,EAAMW,WAAa,IAAIN,IAAY,SAEnCL,EAAMY,IAAM,IAAIP,IAAe,QAAU,IAEzC,IAAMQ,EAAW,IAAIR,KAAoB,CAACS,WAAW,IACrDD,EAASE,QAAQ,IAAK,KAGtB,IAAMC,EAAgB,IAAIC,IAAcX,EAAQO,EAASK,YACzDF,EAAcG,eAAgB,EAC9BH,EAAcI,OAAOC,EAAI,EAGzB,IAAMC,EAAS,WACbT,EAASE,QAAQhB,EAAWwB,YAAaxB,EAAWyB,cACpDlB,EAAOmB,OAAS1B,EAAWwB,YAAcxB,EAAWyB,aACpDlB,EAAOoB,0BAETC,OAAOC,iBAAiB,SAAUN,GAIlC,IAAMO,EAAW,IAAIxB,IAAmB,SAAU,GAClDL,EAAMO,IAAIsB,GAEV,IAAMC,EAAa,IAAIzB,IAAiB,QAAU,GAClDyB,EAAWtB,SAASa,EAAI,EACxBS,EAAWtB,SAASuB,EAAI,EACxB/B,EAAMO,IAAKuB,GAEX,IAAME,EAAc,IAAI3B,IAAiB,SAAU,GACnD2B,EAAYxB,SAASC,KAAK,EAAE,EAAE,GAC9BT,EAAMO,IAAKyB,GAEX,IACMC,GADS,IAAI5B,KACC6B,KAAK,CACvB,gBACA,gBACA,gBACA,gBACA,gBACA,kBAGFlC,EAAMmC,YAAcF,EAiCpB,IAAMG,EAAc,IAAIC,IACxBD,EAAYE,eAAe,YAE3B,IAAMC,EAAa,IAAIC,IACvBD,EAAWE,eAAeL,GAC1BG,EAAWL,KAAK,6BACd,SAACQ,GACC1C,EAAMO,IAAImC,EAAK1C,UAEjB,WACE2C,QAAQC,IAAI,eAEd,WACED,QAAQC,IAAI,aAOA,SAAVC,IACJ7B,EAAc8B,SACdjC,EAASkC,OAAO/C,EAAOM,GACvB0C,sBAAsBH,GAExBA,GAKO,I,QC9GQI,EAhBD,WACZ,IAAMC,EAAWC,iBAAO,MAUxB,OARAC,qBAAU,WAGR,ODwHqB,SAACF,GACxBnD,EAAamD,EAASG,QACtB/B,IACAvB,EAAWuD,YAAYzC,EAASK,YC7H9BqC,CAAUL,GAEH,WDgITlD,EAAMwD,UACNzD,EAAW0D,YAAY5C,EAASK,eC9H7B,IAGD,cAACtB,EAAD,CAAgB8D,UAAU,iBAAiBC,IAAKT,KCNrCU,MARf,WACE,OACE,mCACE,cAAC,EAAD,OCANC,IAASd,OACP,cAAC,IAAMe,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.6f50bc08.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const ContainerScene = styled.div`\r\n  width: 100%;\r\n  height: 100vh;\r\n`;\r\n","import * as THREE from \"three\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\r\nimport { DRACOLoader } from \"three/examples/jsm/loaders/DRACOLoader\";\r\nimport { gsap } from \"gsap\"\r\n\r\n//Global variables\r\nlet currentRef = null;\r\n\r\nconst timeline = new gsap.timeline({ \r\n  defaults:{\r\n    duration: 30,\r\n  }\r\n})\r\n\r\n//Scene, camera, renderer\r\nconst scene = new THREE.Scene();\r\nconst camera = new THREE.PerspectiveCamera(25, 100 / 100, 0.1, 2000);\r\nscene.add(camera);\r\ncamera.position.set(0, 0, 5);\r\ncamera.lookAt(new THREE.Vector3());\r\n\r\n//Ambient / World\r\nscene.background = new THREE.Color(0x131215)\r\n\r\nscene.fog = new THREE.FogExp2( 0x131215, 0.1 )\r\n\r\nconst renderer = new THREE.WebGLRenderer({antialias: true});\r\nrenderer.setSize(100, 100);\r\n\r\n//OrbitControls\r\nconst orbitControls = new OrbitControls(camera, renderer.domElement);\r\norbitControls.enableDamping = true;\r\norbitControls.target.y = 0\r\n\r\n//Resize canvas\r\nconst resize = () => {\r\n  renderer.setSize(currentRef.clientWidth, currentRef.clientHeight);\r\n  camera.aspect = currentRef.clientWidth / currentRef.clientHeight;\r\n  camera.updateProjectionMatrix();\r\n};\r\nwindow.addEventListener(\"resize\", resize);\r\n\r\n\r\n//LIGHTS\r\nconst ambLight = new THREE.AmbientLight(0x9f9fff, 1)\r\nscene.add(ambLight)\r\n\r\nconst pointLight = new THREE.PointLight(0x323292, 4)\r\npointLight.position.y = 5\r\npointLight.position.x = 1\r\nscene.add( pointLight );\r\n\r\nconst pointLight2 = new THREE.PointLight(0xaf526a, 2)\r\npointLight2.position.set(-2,1,5)\r\nscene.add( pointLight2 );\r\n\r\nconst envMap = new THREE.CubeTextureLoader()\r\nconst eMap = envMap.load([\r\n  './hdri/px.png',\r\n  './hdri/nx.png',\r\n  './hdri/py.png',\r\n  './hdri/ny.png',\r\n  './hdri/pz.png',\r\n  './hdri/nz.png',\r\n])\r\n\r\nscene.environment = eMap\r\n// scene.background = eMap\r\n\r\n// cube TEXTURES\r\n// const textureloader = new THREE.TextureLoader()\r\n// const map = textureloader.load('textures/eroded-stylized-cliff3-albedo.png')\r\n// const ao = textureloader.load('textures/eroded-stylized-cliff3-ao.png')\r\n// const norm = textureloader.load('textures/eroded-stylized-cliff3-normal-ogl.png')\r\n// const disp = textureloader.load('textures/eroded-stylized-cliff3-height.png')\r\n// const metal = textureloader.load('textures/eroded-stylized-cliff3-metallic.png')\r\n// const rough = textureloader.load('textures/eroded-stylized-cliff3-roughness.png')\r\n\r\n//cube GEO\r\n// const boxBuff = new THREE.SphereGeometry( 0.5, 64, 64)\r\n// const stdrMat = new THREE.MeshStandardMaterial({\r\n//     map: map,\r\n//     aoMap: ao,\r\n//     roughnessMap: rough,\r\n//     normalMap: norm,\r\n//     displacementMap: disp,\r\n//     displacementScale: 0.1,\r\n//     metalnessMap: metal,\r\n//     wireframe: true\r\n//   })\r\n\r\n// const cube = new THREE.Mesh(\r\n//   boxBuff,\r\n//   stdrMat\r\n// )\r\n// scene.add(cube);\r\n\r\n\r\n//MODELS\r\nconst dracoLoader = new DRACOLoader()\r\ndracoLoader.setDecoderPath('./draco/')\r\n\r\nconst gltfLoader = new GLTFLoader()\r\ngltfLoader.setDRACOLoader(dracoLoader)\r\ngltfLoader.load('./models/cubetas/pro.gltf',\r\n  (gltf)=>{\r\n    scene.add(gltf.scene)\r\n  },\r\n  ()=>{\r\n    console.log(\"Progress\")\r\n  },\r\n  ()=>{\r\n    console.log(\"Error\")\r\n  },\r\n)\r\n\r\n\r\n\r\n//Animate the scene\r\nconst animate = () => {\r\n  orbitControls.update();\r\n  renderer.render(scene, camera);\r\n  requestAnimationFrame(animate);\r\n};\r\nanimate();\r\n\r\n\r\n\r\n//Init and mount the scene\r\nexport const initScene = (mountRef) => {\r\n  currentRef = mountRef.current;\r\n  resize();\r\n  currentRef.appendChild(renderer.domElement);\r\n};\r\n\r\n//Dismount and clena up the buffer from the scene\r\nexport const cleanUpScene = () => {\r\n  scene.dispose();\r\n  currentRef.removeChild(renderer.domElement);\r\n};\r\n\r\n// export const moveBuket = ()=>{\r\n//   timeline.from(cube.rotation, {\r\n//     y: Math.PI * 2,\r\n//   })\r\n// }\r\n// moveBuket()","import { useEffect, useRef } from \"react\";\r\nimport { ContainerScene } from \"./Scene.elements\";\r\nimport { cleanUpScene, initScene } from \"./Script\";\r\n\r\nconst Scene = () => {\r\n  const mountRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    initScene(mountRef);\r\n\r\n    return () => {\r\n      cleanUpScene();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <ContainerScene className='SceneContainer' ref={mountRef}></ContainerScene>\r\n  );\r\n};\r\n\r\nexport default Scene;\r\n","import { Scene } from \"./components\";\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Scene />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}